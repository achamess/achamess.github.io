# Learn to Code - A Guide for the Outsider

## Overview



## Principles

Adapted from [The First 20 Hours (Josh Kaufmann)](http://www.amazon.com/gp/product/B00AFPVPDG)

### Learning
- Research the skill and related topics
- Eliminate distractions in your environment
- Use spaced repetition and reinforcement for memorization
- Create scaffolds and checklists
- Honor your biologist

### Skill Acquisition
- Choose a lovable project
- Define your target performance level
- Deconstruct the skill into subskills
- Obtain critical tools
- Eliminate barriers to practice
- Make dedicated time for practice
- Create fast feedback loops
- Practice by the clock in short bursts
- Emphasize quantity and speed


## My Take

**1| Survey the landscape**

When you're completely new to a subject, you don't have any background. You don't know what the basic knowledge elements of a domain are, and you don't what the practical applications of that domain knowledge are. Thus, the first thing you need to do is to familiarize yourself at a high level (30,000 Foot view). Move quickly through the material. Even just looking at the table of contents and the headings and subheadings of the text will give you the broad outlines of a domain. Knowing what a domain consists of and what you can do with it is the first step to learning something new.

**2| Decide what you want to do**

Once you've got some background, then you can begin to decide what you want to do. Why do you want to learn programming? And what do you want to do with that knowledge? Devising a specific project through which you will learn and apply the key ideas and skills of programming is the best way. This is the learning by doing method, and I think it is the best way. 

**3| Deconstruct your project into tasks**
If you look at a project as a whole, you'll be overwhelmed. The key to learning is to break things down into small, granular, surmountable tasks. Using our project as a vehicle for learning, break down the projects into subtasks. Find out what information is necessary to carry out each task in the project. Link that to your task.

**4| Learn by doing**
Start doing. For each task, go to the learning resource you need. Read it. Then start trying to do stuff. If you get stuff, consult your reference. When you're done. Reflect. Repeat. 


## My Personal Curriculum

### Motivation
Motivation is a necessary (albeit, not sufficient) condition for successful learning. You could be the smartest person in the world, but if you're not motivated, you won't be able to muster the effort to get good at anything. 

Some articles about motivation and goal-setting in general:

[The Ultimate Guide to Motivation â€“ How to Achieve Any Goal](http://zenhabits.net/the-ultimate-guide-to-motivation-how-to-achieve-any-goal/)


#### Why Coding?

**General**
- [Who needs to learn to code](http://online.wsj.com/news/articles/SB10001424052702304709904579411354120634252)
- [Program or Perish: Why Everyone Should Learn to Code](http://www.coca-colacompany.com/stories/program-or-perish-why-everyone-should-learn-to-code)
- [Why every child should learn to code](http://www.theguardian.com/technology/2014/feb/07/year-of-code-dan-crow-songkick)
- [Should You Learn To Code? Six Pros And Cons](http://www.forbes.com/sites/theyec/2013/12/18/should-you-learn-to-code-six-pros-and-cons/)
- [The Reason Everyone Should Learn to Code](http://radar.oreilly.com/2014/01/the-reason-everyone-should-learn-to-code.html)

**Job Opportunities**
[Computer Programmer - US World News](http://money.usnews.com/careers/best-jobs/computer-programmer)
[Web Developer - US World News](http://money.usnews.com/careers/best-jobs/web-developer)


### Elements of Programming and Computer Science

Goal: Get a high level view of programming

Questions:
What are the basic elements of programming? 
What are the applications of programming?

**Resources**

**Books**

_Top Choice_
[Hello World: Computer Programming for Kids and Other Beginners](http://www.manning.com/sande2/) (Python)

_Books I've tried_
[Hello World: Computer Programming for Kids and Other Beginners](http://www.manning.com/sande2/) (Python)
[Computer Science Programming Basics in Ruby](http://www.amazon.com/Computer-Science-Programming-Basics-Ruby/dp/1449355978) (Ruby)
[Practical Programming: An Introduction to Computer Science Using Python 3 ] (http://www.amazon.com/gp/product/1937785459/ref=pd_lpo_sbs_dp_ss_1?pf_rd_p=1535523722&pf_rd_s=lpo-top-stripe-1&pf_rd_t=201&pf_rd_i=1934356271&pf_rd_m=ATVPDKIKX0DER&pf_rd_r=0DHQHD57YC8PK50AX551) (Python)
[Python for Informatics] (http://open.umich.edu/education/si/resources/python-opentextbook/winter2010) (Python)
[Think Python](http://www.greenteapress.com/thinkpython/)
[Python for Biologists](http://pythonforbiologists.com/)
[Introduction to Computer Science using Python](http://www.amazon.com/Introduction-Computer-Science-Using-Python/dp/0470555157/ref=sr_1_1?s=books&ie=UTF8&qid=1410056769&sr=1-1&keywords=Introduction-Computer-Science-Using-Python+dierbach)

**Videos**
[Learn to Program: The Fundamentals]()(Python): A well-done MOOC course. Takes you through the basic elements of programming in a clear manner, with many examples and some code assignments. If you like to learn from video lectures, it's the best course on the web. The content is created by the authors of [Practical Programming]() and thus it follows the sequence of that text closely.The book is a helpful supplement to the video course. 
[CS Introduction to Computer Science]: Another

**Learn as by doing - Interactive**
- [Codeacademy](www.codeacademy.com): An phenomenal resource if you enjoy learning by doing. This is the major strength of codeacedmy I think. It doesn't try to make you read through a book. You get your hands dirty from the first moment, and you learn ideas and code by completing granular tasks that become increasingly challenging. It's an engaging way to learn for sure, and beats hunkering down in a text. But, for me, I don't find this kind of learning to be fruitful from the get-go. I like to have some of the concept and theory in my mind before I begin doing things. 



